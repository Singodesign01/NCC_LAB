1: Write a C# program to add two digits using delegate
.....................................................

using System;

delegate int NumberChanger(int n);

namespace Example
{
    class DelegateExample
    {
        static int num = 10;

        public static int AddNum(int a)
        {
            num += a;
            return num;
        }

        static void Main(string[] args)
        {
            NumberChanger nc = new NumberChanger(AddNum);
            Console.WriteLine("Initial number: " + num);
            nc(5); // Adds 5 to the initial number
            Console.WriteLine("Updated number: " + num);
        }
    }
}

......................................................
2: Write a C# program to add two digit using constructor•

using System;

class AddTwoDigits
{
    private int digit1;
    private int digit2;

    // Constructor to initialize the digits
    public AddTwoDigits(int d1, int d2)
    {
        digit1 = d1;
        digit2 = d2;
    }

    // Method to compute the sum of the digits
    public int ComputeSum()
    {
        return digit1 + digit2;
    }

    static void Main(string[] args)
    {
        Console.Write("Enter the first digit: ");
        int firstDigit = int.Parse(Console.ReadLine());

        Console.Write("Enter the second digit: ");
        int secondDigit = int.Parse(Console.ReadLine());

        AddTwoDigits digits = new AddTwoDigits(firstDigit, secondDigit);
        int sum = digits.ComputeSum();

        Console.WriteLine($"Sum of {firstDigit} and {secondDigit} is {sum}");
    }
}


.................................................
3: Write a C# program to display student ld and Name using automatic properties

using System;

class Student
{
    // Automatic properties for student ID and name
    public int StudentId { get; set; }
    public string StudentName { get; set; }

    public override string ToString()
    {
        return $"Student ID: {StudentId}, Name: {StudentName}";
    }

    static void Main(string[] args)
    {
        // Create a sample student
        Student student = new Student
        {
            StudentId = 101,
            StudentName = "John Doe"
        };

        // Display student details
        Console.WriteLine(student);
    }
}
.....................................................
4: Write a C# program to reverse element Of an array•

1 Method: Using Array.Reverse() Method: The simplest way is to use the Array.Reverse() method, which reverses the order of elements in a one-dimensional array. Here’s an example:

using System;

class Program
{
    static void Main(string[] args)
    {
        int[] arr = { 1, 2, 3, 4, 5 };

        // Reverse the array
        Array.Reverse(arr);

        Console.WriteLine("Reversed Array Elements:");
        foreach (var item in arr)
        {
            Console.Write(item + " ");
        }
    }
}

method 2: Manual Reversal Using Swapping: If you want to reverse the array manually (without using Array.Reverse()), you can swap elements from both ends of the array. Here’s an example:
using System;

class Program
{
    static void Main(string[] args)
    {
        int[] arr = { 1, 2, 3, 4, 5 };

        // Reverse the array manually
        ReverseElements(arr);

        Console.WriteLine("Reversed Array Elements:");
        foreach (var item in arr)
        {
            Console.Write(item + " ");
        }
    }

    static void ReverseElements(int[] arr)
    {
        int startIndex = 0;
        int endIndex = arr.Length - 1;

        while (startIndex < endIndex)
        {
            // Swap elements at startIndex and endIndex
            int temp = arr[startIndex];
            arr[startIndex] = arr[endIndex];
            arr[endIndex] = temp;

            startIndex++;
            endIndex--;
        }
    }
}
......................................................
5: Write a C# program how Name of Students are stored and retrieved using indexer.


using System;

class StudentCollection
{
    private string[] studentNames = new string[10]; // Array to store student names

    // Indexer to access student names by index
    public string this[int index]
    {
        get
        {
            if (index >= 0 && index < studentNames.Length)
                return studentNames[index];
            else
                throw new IndexOutOfRangeException("Invalid index");
        }
        set
        {
            if (index >= 0 && index < studentNames.Length)
                studentNames[index] = value;
            else
                throw new IndexOutOfRangeException("Invalid index");
        }
    }

    static void Main(string[] args)
    {
        StudentCollection students = new StudentCollection();

        // Add student names using indexer
        students[0] = "Harry";
        students[1] = "Ron";
        students[2] = "Hermione";

        // Retrieve and display student names
        Console.WriteLine("Student names:");
        for (int i = 0; i < 3; i++)
        {
            Console.WriteLine($"Student {i + 1}: {students[i]}");
        }
    }
}
.....................................................
6: Write a C# program For showing single, multiple, multilevel and hierarchica inheritance.

1: Single Inheritance:
	a: In single inheritance, a derived class inherits from a single base class.
class Animal
{
    // Fields and methods related to animals
}

class Dog : Animal
{
    // Fields and methods specific to dogs
}


2: Multilevel Inheritance:
	a: In multilevel inheritance, a derived class inherits from a base class, which itself inherits from another base class.
Example:
class Vehicle
{
    // Fields and methods related to vehicles
}

class Car : Vehicle
{
    // Fields and methods specific to cars
}

class Sedan : Car
{
    // Fields and methods specific to sedans
}
3. Hierarchical Inheritance:
	o In hierarchical inheritance, multiple derived classes inherit from a single base class.
	o Example:

class Shape
{
    // Fields and methods related to shapes
}

class Circle : Shape
{
    // Fields and methods specific to circles
}

class Rectangle : Shape
{
    // Fields and methods specific to rectangles
}
.....................................................

7: calculate area Of rectangle using multiple inheritance in C#•

using System;

// Base class for shapes
class Shape
{
    public double Length { get; set; }
    public double Breadth { get; set; }

    // Constructor
    public Shape(double length, double breadth)
    {
        Length = length;
        Breadth = breadth;
    }

    // Virtual method to calculate area (can be overridden by derived classes)
    public virtual double CalculateArea()
    {
        return Length * Breadth;
    }
}

// Derived class for rectangles
class Rectangle : Shape
{
    public Rectangle(double length, double breadth) : base(length, breadth)
    {
    }

    // Override the base class method to calculate area specifically for rectangles
    public override double CalculateArea()
    {
        return Length * Breadth;
    }
}

class Program
{
    static void Main(string[] args)
    {
        // Create a rectangle
        Rectangle myRectangle = new Rectangle(10, 5);

        // Calculate and display the area
        double area = myRectangle.CalculateArea();
        Console.WriteLine($"Area of the rectangle: {area}");

        // You can add more shapes (e.g., Circle, Triangle) by creating additional derived classes
    }
}
...................................................
8: Write a C# program how virtual method are used in polymorphism•
>>

Certainly! In C#, virtual methods play a crucial role in achieving polymorphism. Let’s explore how virtual methods work and how they contribute to polymorphism:

Polymorphism and Virtual Methods:
	Polymorphism allows an object to take on different forms based on its context. It enables a single method or operator to behave differently in different scenarios.
	In C#, we achieve polymorphism through virtual methods.
Here’s how it works:
	A base class can declare a method as virtual. This means that the method can be overridden by derived classes.
	A derived class can provide its own implementation of the same method using the override keyword.
	At runtime, the most specific implementation (either from the base class or a derived class) is called based on the actual type of the object.
>>
using System;

class Animal
{
    public virtual void MakeSound()
    {
        Console.WriteLine("Animal makes a generic sound.");
    }
}

class Dog : Animal
{
    public override void MakeSound()
    {
        Console.WriteLine("Dog barks: Woof!");
    }
}

class Program
{
    static void Main(string[] args)
    {
        Animal myAnimal = new Dog(); // Polymorphism: base class reference, derived class object
        myAnimal.MakeSound(); // Calls the overridden method in Dog class
    }
}
.....................................................
9: Write a C# program to add two digit using single cast delegates

using System;

namespace DelegateExample
{
    // Define a delegate for adding two integers
    delegate int AddDelegate(int a, int b);

    class Program
    {
        static int AddNumbers(int x, int y)
        {
            return x + y;
        }

        static void Main(string[] args)
        {
            // Create an instance of the delegate
            AddDelegate addMethod = new AddDelegate(AddNumbers);

            // Call the delegate (equivalent to calling AddNumbers method)
            int result = addMethod(5, 3);
            Console.WriteLine($"Sum: {result}");
        }
    }
}
......................................................
10: Write a C# program to Add, Subtract, multiply, Divide using OOP•
>>
using System;

class Calculator
{
    public double Add(double a, double b)
    {
        return a + b;
    }

    public double Subtract(double a, double b)
    {
        return a - b;
    }

    public double Multiply(double a, double b)
    {
        return a * b;
    }

    public double Divide(double a, double b)
    {
        if (b != 0)
            return a / b;
        else
            throw new DivideByZeroException("Cannot divide by zero.");
    }
}

class Program
{
    static void Main(string[] args)
    {
        Calculator myCalculator = new Calculator();

        double num1 = 10;
        double num2 = 2;

        Console.WriteLine($"Sum: {myCalculator.Add(num1, num2)}");
        Console.WriteLine($"Difference: {myCalculator.Subtract(num1, num2)}");
        Console.WriteLine($"Product: {myCalculator.Multiply(num1, num2)}");

        try
        {
            Console.WriteLine($"Quotient: {myCalculator.Divide(num1, num2)}");
        }
        catch (DivideByZeroException ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
.....................................................
11: Write a C# program to Add, Subtract, multiply, Divide using Interface
>>
 using System;

namespace ArithmeticOperations
{
    // Define an interface for arithmetic operations
    public interface ICalculator
    {
        double Add(double a, double b);
        double Subtract(double a, double b);
        double Multiply(double a, double b);
        double Divide(double a, double b);
    }

    // Implement the interface in a calculator class
    public class Calculator : ICalculator
    {
        public double Add(double a, double b)
        {
            return a + b;
        }

        public double Subtract(double a, double b)
        {
            return a - b;
        }

        public double Multiply(double a, double b)
        {
            return a * b;
        }

        public double Divide(double a, double b)
        {
            if (b != 0)
                return a / b;
            else
                throw new DivideByZeroException("Cannot divide by zero.");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Calculator myCalculator = new Calculator();

            double num1 = 10;
            double num2 = 2;

            Console.WriteLine($"Sum: {myCalculator.Add(num1, num2)}");
            Console.WriteLine($"Difference: {myCalculator.Subtract(num1, num2)}");
            Console.WriteLine($"Product: {myCalculator.Multiply(num1, num2)}");

            try
            {
                Console.WriteLine($"Quotient: {myCalculator.Divide(num1, num2)}");
            }
            catch (DivideByZeroException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}
....................................................
12: Write a C# program to print 1 to 10 using generic list
>>
using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        List<int> numbers = new List<int>();

        // Add numbers from 1 to 10 to the list
        for (int i = 1; i <= 10; i++)
        {
            numbers.Add(i);
        }

        // Print the numbers
        foreach (int num in numbers)
        {
            Console.Write($"{num} ");
        }
    }
}
.....................................................
13: Write a C# program to print Customerld and CustomerName using Dictionary
>>
using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        // Create a dictionary to store customer IDs and names
        Dictionary<int, string> customers = new Dictionary<int, string>();

        // Add some sample data
        customers.Add(101, "John Doe");
        customers.Add(102, "Jane Smith");
        customers.Add(103, "Mike Johnson");

        // Print customer IDs and names
        foreach (var kvp in customers)
        {
            Console.WriteLine($"Customer ID: {kvp.Key}, Name: {kvp.Value}");
        }
    }
}
.....................................................
14: Write a C# program to print Drivelnfo, TotalSize, VolumeLabel of Drive•
>>
using System;
using System.IO;

class Program
{
    static void Main(string[] args)
    {
        // Example: Get information for drive C:
        string driveLetter = "C"; // Change this to the desired drive letter

        try
        {
            DriveInfo driveInfo = new DriveInfo(driveLetter);

            Console.WriteLine($"Drive Name: {driveInfo.Name}");
            Console.WriteLine($"Volume Label: {driveInfo.VolumeLabel}");
            Console.WriteLine($"Total Size: {driveInfo.TotalSize} bytes");
            Console.WriteLine($"Drive Type: {driveInfo.DriveType}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
......................................................
15: Write a C# program to Read, Write, Delete, move, Create a File using File.IO
>>
using System;
using System.IO;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        string filePath = "myFile.txt"; // Change this to your desired file path

        // Write content to a file
        await WriteToFileAsync(filePath, "Hello, World!");

        // Read content from the file
        string content = await ReadFromFileAsync(filePath);
        Console.WriteLine($"File content: {content}");

        // Move the file to a new location
        string newFilePath = "newFile.txt"; // Change this to the new file path
        await MoveFileAsync(filePath, newFilePath);

        // Delete the original file
        await DeleteFileAsync(filePath);

        Console.WriteLine("File operations completed!");
    }

    static async Task WriteToFileAsync(string path, string content)
    {
        await File.WriteAllTextAsync(path, content);
    }

    static async Task<string> ReadFromFileAsync(string path)
    {
        return await File.ReadAllTextAsync(path);
    }

    static async Task MoveFileAsync(string sourcePath, string destinationPath)
    {
        await Task.Run(() => File.Move(sourcePath, destinationPath));
    }

    static async Task DeleteFileAsync(string path)
    {
        await Task.Run(() => File.Delete(path));
    }
}
.....................................................
16: Write a C# program to sort given name using LINQ
>>
using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        List<string> names = new List<string>
        {
            "Alice",
            "Bob",
            "Charlie",
            "David",
            "Eve"
        };

        // Sort the names alphabetically
        var sortedNames = names.OrderBy(name => name).ToList();

        // Print the sorted names
        Console.WriteLine("Sorted Names:");
        foreach (var name in sortedNames)
        {
            Console.WriteLine(name);
        }
    }
}
.....................................................
17: Write a C# program using async and wait for long process
>>
using System;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        Console.WriteLine("Starting the long process...");

        // Simulate a time-consuming operation (e.g., downloading a large file)
        await PerformLongProcessAsync();

        Console.WriteLine("Long process completed!");
    }

    static async Task PerformLongProcessAsync()
    {
        // Simulate waiting for 5 seconds (adjust as needed)
        await Task.Delay(5000);

        Console.WriteLine("Long process finished!");
    }
}

......................................................

18.Write Console Application to perform CRUD Operation using Ado.Net in C#.
>>
using System;
using System.Data;
using System.Data.SqlClient;

class Program
{
    static string connectionString = "YourConnectionStringHere"; // Replace with your actual connection string

    static void Main(string[] args)
    {
        Console.WriteLine("CRUD Operations using ADO.NET");

        while (true)
        {
            Console.WriteLine("\nChoose an option:");
            Console.WriteLine("1. View All Students");
            Console.WriteLine("2. Add Student");
            Console.WriteLine("3. Update Student");
            Console.WriteLine("4. Delete Student");
            Console.WriteLine("5. Exit");

            int choice = int.Parse(Console.ReadLine());

            switch (choice)
            {
                case 1:
                    ViewAllStudents();
                    break;
                case 2:
                    AddStudent();
                    break;
                case 3:
                    UpdateStudent();
                    break;
                case 4:
                    DeleteStudent();
                    break;
                case 5:
                    Environment.Exit(0);
                    break;
                default:
                    Console.WriteLine("Invalid choice. Please select a valid option.");
                    break;
            }
        }
    }

    static void ViewAllStudents()
    {
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();
            string query = "SELECT Id, FirstName, LastName FROM Students";
            using (SqlCommand command = new SqlCommand(query, connection))
            {
                SqlDataReader reader = command.ExecuteReader();
                while (reader.Read())
                {
                    Console.WriteLine($"ID: {reader["Id"]}, Name: {reader["FirstName"]} {reader["LastName"]}");
                }
                reader.Close();
            }
        }
    }

    static void AddStudent()
    {
        Console.Write("Enter First Name: ");
        string firstName = Console.ReadLine();
        Console.Write("Enter Last Name: ");
        string lastName = Console.ReadLine();

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();
            string query = $"INSERT INTO Students (FirstName, LastName) VALUES ('{firstName}', '{lastName}')";
            using (SqlCommand command = new SqlCommand(query, connection))
            {
                command.ExecuteNonQuery();
                Console.WriteLine("Student added successfully!");
            }
        }
    }

    static void UpdateStudent()
    {
        Console.Write("Enter Student ID to update: ");
        int studentId = int.Parse(Console.ReadLine());
        Console.Write("Enter New First Name: ");
        string newFirstName = Console.ReadLine();

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();
            string query = $"UPDATE Students SET FirstName = '{newFirstName}' WHERE Id = {studentId}";
            using (SqlCommand command = new SqlCommand(query, connection))
            {
                int rowsAffected = command.ExecuteNonQuery();
                if (rowsAffected > 0)
                    Console.WriteLine("Student updated successfully!");
                else
                    Console.WriteLine("Student not found.");
            }
        }
    }

    static void DeleteStudent()
    {
        Console.Write("Enter Student ID to delete: ");
        int studentId = int.Parse(Console.ReadLine());

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();
            string query = $"DELETE FROM Students WHERE Id = {studentId}";
            using (SqlCommand command = new SqlCommand(query, connection))
            {
                int rowsAffected = command.ExecuteNonQuery();
                if (rowsAffected > 0)
                    Console.WriteLine("Student deleted successfully!");
                else
                    Console.WriteLine("Student not found.");
            }
        }
    }
}
.................................................
19: Write Console Application to perform CRUD Operation using Entity Framework in C#.
>>
using System;
using System.Linq;
using System.Data.Entity;

namespace CRUDExample
{
    class Student
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
    }

    class SchoolContext : DbContext
    {
        public DbSet<Student> Students { get; set; }
    }

    class Program
    {
        static void Main(string[] args)
        {
            using (var context = new SchoolContext())
            {
                // Create
                var newStudent = new Student { FirstName = "John", LastName = "Doe" };
                context.Students.Add(newStudent);
                context.SaveChanges();

                // Read
                var student = context.Students.Find(newStudent.Id);
                Console.WriteLine($"Student: {student.FirstName} {student.LastName}");

                // Update
                student.FirstName = "Jane";
                context.SaveChanges();

                // Delete
                context.Students.Remove(student);
                context.SaveChanges();
            }
        }
    }
}

